using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;
/*Задание№1
Создайте класс MyMatrix, представляющий матрицу m на n.
Создайте конструктор, принимающий число строк и столбцов, 
заполняющий матрицу случайными числами в диапазоне, который пользователь вводит при запуске программы.
Определите операторы сложения, вычитания и умножения матриц, а также умножения и деления матрицы на число.
Создайте пользовательский индексатор матрицы для доступа к элементам матрицы по номеру строки и столбца.
*/
namespace laba4._1
{

    class MyMatrix
    {
        public int[,] matrix { get; set; }
        public int stroka { get; set; }
        public int stolbec { get; set; }

        public MyMatrix(int stroka, int stolbec)
        {

            int[,] matrix = new int[stroka, stolbec];

            this.matrix = matrix;
        }
        public MyMatrix RandMatr(MyMatrix matr, int min, int max)
        {
            Random random = new Random();
            for (int i = 0; i < matr.matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matr.matrix.GetLength(1); j++)
                {

                    matr[i, j] = random.Next(min, max);
                }
            }
            return matr;
        }
        public int this[int stroka, int stolbec]
        {
            get
            {
                return matrix[stroka, stolbec];
            }
            set
            {
                matrix[stroka, stolbec] = value;
            }
        }
        public static MyMatrix operator *(MyMatrix m1, MyMatrix m2)
        {
            MyMatrix m3 = new MyMatrix(m1.matrix.GetLength(0), m2.matrix.GetLength(1));
            Console.WriteLine($"первое измерение {m3.matrix.GetLength(0)}");
            Console.WriteLine($"второе измерение {m3.matrix.GetLength(1)}");
            for (int i = 0; i < m3.matrix.GetLength(0); i++)//количество строк от матрицы 1
            {
                for (int b = 0; b < m3.matrix.GetLength(1); b++)
                {
                    int buffer = 0;
                    for(int j = 0; j< m3.matrix.GetLength(1); j++)
                    {
                        
                        buffer += m1[i, j] * m2[j, b];
                        if (j+1 == m3.matrix.GetLength(1));
                        {
                            m3[i, b] = buffer;
                            Console.Write($"{m3[i, b]}\t");
                        }
                    }
                }
            }
            return m3;
        }
        public static MyMatrix operator +(MyMatrix m1, MyMatrix m2)
        {
            MyMatrix m3 = new MyMatrix(m1.matrix.GetLength(0), m2.matrix.GetLength(1));
            for (int i = 0; i < m1.matrix.GetLength(0); i++)
            {
                for (int j = 0; j < m2.matrix.GetLength(1); j++)
                {
                    m3[i,j] = m1[i, j] + m2[i,j];
                }   
            }
            return m3;
        }
        public static MyMatrix operator -(MyMatrix m1, MyMatrix m2)
        {
            MyMatrix m3 = new MyMatrix(m1.matrix.GetLength(0), m2.matrix.GetLength(1));
            for (int i = 0; i < m1.matrix.GetLength(0); i++)
            {
                for (int j = 0; j < m2.matrix.GetLength(1); j++)
                {
                    m3[i, j] = m1[i, j] - m2[i, j];
                }
            }
            return m3;
        }
        public static MyMatrix operator*(MyMatrix m, int a)//умнож на число
        {
            for (int i = 0; i<m.matrix.GetLength(0);i++)
            {
                for (int j = 0; j<m.matrix.GetLength(1);j++)
                {
                    m[i, j] *= a;
                }
            }
            return m;
        }
        public static MyMatrix operator /(MyMatrix m, int a)//деление на число
        {
            for (int i = 0; i < m.matrix.GetLength(0); i++)
            {
                for (int j = 0; j < m.matrix.GetLength(1); j++)
                {
                    m[i, j] /= a;
                }
            }
            return m;
        }
        public void PrintMat(MyMatrix m)
        {
            for (int i = 0; i<m.matrix.GetLength(0);i++)
            {
                for(int j = 0; j<m.matrix.GetLength(1);j++)
                {
                    Console.Write($"{m[i, j]}\t");
                }
                Console.WriteLine();
            }
            Console.WriteLine();

        }


    }


    internal class Program
    {
        static void Main(string[] args)
        {
            
            int stroki1 = Convert.ToInt32(Console.ReadLine());
            int stolbi1 = Convert.ToInt32(Console.ReadLine());
            int stroki2 = Convert.ToInt32(Console.ReadLine());
            int stolbi2 = Convert.ToInt32(Console.ReadLine());
            int min = Convert.ToInt32(Console.ReadLine());
            int max = Convert.ToInt32(Console.ReadLine());
            MyMatrix m1 = new MyMatrix(stroki1, stolbi1);
            m1.RandMatr(m1, min, max);
            Console.WriteLine("Матрица 1");
            m1.PrintMat(m1);
            MyMatrix m2 = new MyMatrix(stroki2, stolbi2);
            m2.RandMatr(m2, min, max);
            Console.WriteLine("Матрица 2");
            m2.PrintMat(m2);
            MyMatrix m3 = m1* m2;
            Console.WriteLine("Матрица 1*2");
            m3.PrintMat(m3);
            Console.WriteLine("s");
            Console.WriteLine("Матрица 1*2*4");
            MyMatrix m4 = m3 * 4;
            m4.PrintMat(m4);
        }
    }
}

