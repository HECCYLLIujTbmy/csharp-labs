using System;
using System.Collections;
using System.Collections.Generic;

class MyDictionary<TKey, TValue> : IEnumerable<KeyValuePair<TKey, TValue>>
{
    private TKey[] keys;
    private TValue[] values;
    private int count;

    public MyDictionary(int capacity)
    {
        keys = new TKey[capacity];
        values = new TValue[capacity];
        count = 0;
    }

    public void Add(TKey key, TValue value)
    {
        if (count < keys.Length)
        {
            keys[count] = key;
            values[count] = value;
            count++;
        }
        else
        {
            throw new InvalidOperationException("MyDictionary is full.");
        }
    }

    public TValue this[TKey key]
    {
        get
        {
            for (int i = 0; i < count; i++)
            {
                if (object.Equals(keys[i], key))
                {
                    return values[i];
                }
            }
            throw new KeyNotFoundException($"The key '{key}' was not found in MyDictionary.");
        }
    }

    public int Count
    {
        get { return count; }
    }

    public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
    {
        for (int i = 0; i < count; i++)
        {
            yield return new KeyValuePair<TKey, TValue>(keys[i], values[i]);
        }
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
}

class Program
{
    static void Main()
    {
        MyDictionary<string, int> myDict = new MyDictionary<string, int>(5);

        myDict.Add("one", 1);
        myDict.Add("two", 2);
        myDict.Add("three", 3);

        Console.WriteLine($"Count: {myDict.Count}");

        foreach (var pair in myDict)
        {
            Console.WriteLine($"{pair.Key}: {pair.Value}");
        }

        Console.WriteLine("Value for 'two': " + myDict["two"]);
    }
}
