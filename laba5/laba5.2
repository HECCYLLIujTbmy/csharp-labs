using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
/*Создайте класс MyList<T>.
Реализуйте в простейшем приближении возможность использования его экземпляра аналогично экземпляру класса List<T>.
Минимально требуемый интерфейс взаимодействия с экземпляром должен включать метод добавления элемента, индексатор для получения значения элемента по указанному индексу, свойство только для чтения для получения общего количества элементов и поддержку блока инициализации.
При выполнении нельзя использовать коллекции, только массивы.
*/
namespace laba5._2
{
    public class MyList<T>: IEnumerable<T>
    {
        private T[] items;
        private int count;

        public MyList()
        {
            items = new T[4]; // Инициализируйте массив начальной емкостью
            count = 0;
        }

        public void Add(T item)
        {
            // Проверка, нужно ли увеличивать емкость массива
            if (count == items.Length)
            {
                Array.Resize(ref items, items.Length +1);
            }

            items[count] = item;
            count++;
        }

        public int Count
        {
            get { return count; }
        }

        public T this[int index]
        {
            get
            {
                if (index >= 0 && index < count)
                {
                    return items[index];
                }
                throw new IndexOutOfRangeException("Index is out of range");
            }
        }
        

        // Метод для поддержки блока инициализации
        public void Initialize(params T[] values)
        {
            if (values.Length > items.Length)
            {
                Array.Resize(ref items, values.Length * 2);
            }

            for (int i = 0; i < values.Length; i++)
            {
                items[i] = values[i];
            }

            count = values.Length;
        }
        public IEnumerator<T> GetEnumerator()
        {
            for (int i = 0; i < count; i++)
            {
                yield return items[i];
            }
        }
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }
    }


    internal class Program
    {
        static void Main(string[] args)
        {
            MyList<int> list = new MyList<int>();
            list.Initialize(2, 3, 45, 6);
            list.Add(1);
            Console.Write(list[0]);
            foreach(var  item in list)
            {
                Console.WriteLine(item);
            }
        }
    }
}
