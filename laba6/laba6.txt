
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using static System.Net.WebRequestMethods;
/*Зарегистрируйтесь на сайте https://openweathermap.org/ для получения ключа (API key) к API от сервиса погоды.
Создайте структуру Weather, содержащую свойства 
Country(страна), 
Name(город или название местности), 
Temp(температура воздуха), 

Description(описание погоды).
Используя API, получите не менее 50 значений текущей погоды в разных точках мира.
Используйте запрос вида: 
https://api.openweathermap.org/data/2.5/weather?lat={Широта}&lon={Долгота}&appid={API key}
, где:
Широта - дробная величина в диапазоне от -90 до 90. 
Долгота - дробная величина в диапазоне от -180 до 180.
API key - ключ, полученный при регистрации на сайте https://openweathermap.org/.
Значения Широты и Долготы изменяйте случайным образом в заданных диапазонах,
если для полученной координаты нет значения Country или Name,
следует сгенерировать новые координаты.
На основе полученных данных создайте и заполните коллекцию структур Weather.
С помощью LINQ запросов к созданной коллекции, получите и выведите на консоль следующие данные:
Страну с максимальной и минимальной температурой.
Среднюю температуру в мире.
Количество стран в коллекции.
Первую найденную страну и название местности, в которых Description принимает значение: "clear sky","rain","few clouds"
*/
namespace laba6
{
    
    struct Weather
    {
        public string Description { get; set; }
        public double Temp { get; set; }
        public string Country { get; set; }
        public string Name { get; set; }    
        
    }
    public class Coord
    {
        public double Lon { get; set; }
        public double Lat { get; set; }
    }
    class Program
    {
        private const string apiKey = "54be6092d1b282ee0c61c14cdd76bda3";
        private const int numberOfWeatherData = 50;

        static async Task Main()
        {           
            List<Weather> weatherData = new List<Weather>();
            Random random = new Random();
            for (int i = 0; i < 100; i++)
            {
                double latitude = random.NextDouble() * 180 - 90;
                double longitude = random.NextDouble() * 360 - 180;
                string apiUrl = $"https://api.openweathermap.org/data/2.5/weather?lat={latitude}&lon={longitude}&appid={apiKey}";
                //string apiUrl = $"https://api.openweathermap.org/data/2.5/weather?lat={55.45}&lon={37.37}&appid={apiKey}";
                using (var client = new HttpClient())
                {
                    
                        HttpResponseMessage response = await client.GetAsync(apiUrl);
                        
                        if (response.IsSuccessStatusCode)
                        { 
                            var weatherJson = await response.Content.ReadAsStringAsync();                                                   
                            JObject jsonObject = JObject.Parse(weatherJson);
                            
                            //var d1 = (string)jsonObject["weather"]["description"];

                            
                            Weather weather = new Weather();
                            weather.Description = (string)jsonObject["weather"].First()["description"];
                            weather.Temp= (double)jsonObject["main"]["temp"];
                            weather.Country = (string)jsonObject["sys"]["country"];
                            weather.Name = (string)jsonObject["name"];
                           
                         
                                                  
                            if (String.IsNullOrWhiteSpace(weather.Name))
                            {
                                Console.WriteLine("(string)jsonObject[name]==null");
                                i--;
                                continue;
                            }
                            if (String.IsNullOrWhiteSpace(weather.Country))
                            {
                                Console.WriteLine("(string)jsonObject[country]==null");
                                i--;
                                continue;
                            }                           
                            weatherData.Add(weather);
                            i++;
                        

                    }
                    }
                    
            }
            Console.WriteLine("s");
            var maxtemp = (from weatherEntry in weatherData
                                    where weatherEntry.Temp == weatherData.Max(w => w.Temp)
                                    select new { Country = weatherEntry.Country, Temperature = weatherEntry.Temp }).FirstOrDefault();
            Console.WriteLine($"Страна: {maxtemp.Country}, Максимальная температура: {maxtemp.Temperature}");
            var resultAnonymous = (from weatherEntry in weatherData
                                   where weatherEntry.Temp == weatherData.Min(w => w.Temp)
                                   select new { Country = weatherEntry.Country, Temperature = weatherEntry.Temp }).FirstOrDefault();
            Console.WriteLine($"Страна: {resultAnonymous.Country}, Минимальная температура: {resultAnonymous.Temperature}");
            double sredzna4 = weatherData.Average(w => w.Temp);
            Console.WriteLine($"Средняя температура: {sredzna4}");
            int kolvo = weatherData.Count();
            Console.WriteLine($"Колво стран: {kolvo}");
            //Первую найденную страну и название местности, в которых Description принимает значение: "clear sky","rain","few clouds"
            var clearsky = (from weatherEntry in weatherData
                               where weatherEntry.Description == "clear sky"
                               select new { Name = weatherEntry.Name, Description = weatherEntry.Description}).FirstOrDefault();
            if (clearsky != null)
            {
                Console.WriteLine($"{clearsky.Name} {clearsky.Description}");
            }
            else
            {
                Console.WriteLine("clear sky не найдена.");
            }
            
            var rain = (from weatherEntry in weatherData
                            where weatherEntry.Description == "rain"
                        select new { Name = weatherEntry.Name, Description = weatherEntry.Description }).FirstOrDefault();
            if (rain != null)
            {
                Console.WriteLine($"{rain.Name} {rain.Description}");
            }
            else
            {
                Console.WriteLine("rain' не найдена.");
            }
           
            var fewclouds = (from weatherEntry in weatherData
                        where weatherEntry.Description == "few clouds"
                        select new { Name = weatherEntry.Name, Description = weatherEntry.Description }).FirstOrDefault();
            if (fewclouds != null)
            {
                Console.WriteLine($"{fewclouds.Name} {fewclouds.Description}");
            }
            else
            {
                Console.WriteLine("few clouds не найдена.");
            }
           
        }
    }         
}


